[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["futurama_api", "mcp_server"]

[project]
name = "futurama-quotes-api"
version = "1.0.0"
description = "ðŸš€ Futurama Quotes CRUD API with MCP Server Integration and Simple Frontend"
authors = [
    {name = "GitHub Copilot", email = "copilot@github.com"}
]
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Framework :: Flask",
    "Topic :: Internet :: WWW/HTTP :: Dynamic Content",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
keywords = ["futurama", "quotes", "api", "flask", "mcp", "crud", "rest"]

dependencies = [
    "flask>=3.0.0,<4.0.0",
    "flask-cors>=4.0.0,<5.0.0",
    "mcp>=1.0.0,<2.0.0",
    "httpx>=0.25.0,<1.0.0",
    "pydantic>=2.5.0,<3.0.0",
    "uvicorn>=0.24.0,<1.0.0",
    "pytest>=7.4.4",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0,<8.0.0",
    "pytest-asyncio>=0.21.0,<1.0.0",
    "pytest-cov>=4.1.0,<5.0.0",
    "black>=23.0.0,<24.0.0",
    "ruff>=0.1.0,<1.0.0",
    "mypy>=1.6.0,<2.0.0",
    "pre-commit>=3.5.0,<4.0.0",
]

[project.scripts]
futurama-api = "futurama_api.app:main"
futurama-mcp = "mcp_server.server:main"

[project.urls]
Homepage = "https://github.com/jschroeder-mips/mcp-flask-crud-example"
Repository = "https://github.com/jschroeder-mips/mcp-flask-crud-example.git"
Documentation = "https://github.com/jschroeder-mips/mcp-flask-crud-example#readme"
Issues = "https://github.com/jschroeder-mips/mcp-flask-crud-example/issues"

[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311', 'py312']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | venv
  | \.pytest_cache
  | build
  | dist
)/
'''

[tool.ruff]
target-version = "py38"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["futurama_api", "mcp_server"]
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    ".venv/*",
    "venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
